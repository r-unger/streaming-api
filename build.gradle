plugins {
    id 'org.springframework.boot' version '2.3.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
// next line only for .war files
    id 'war'
}

group = 'com.videotools'
    // some kind of TLD is needed, or else tomcat is warning
version = 'v1'
    // this is not the source version, but the API version
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot declarations
    implementation 'org.springframework.boot:spring-boot-starter-web'
// next line only for .war files
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    // Logging: SLF4J + Logback
    // Tip: SLF4J 2.0 + Logback 1.3 (Java 9 modular) is in early development
    // (as of Juni 2020)
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.+'
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-core
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.+'
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.+'
    // https://mvnrepository.com/artifact/org.codehaus.janino/janino
    implementation group: 'org.codehaus.janino', name: 'janino', version: '3.1.+'
    // https://mvnrepository.com/artifact/org.codehaus.janino/commons-compiler
    implementation group: 'org.codehaus.janino', name: 'commons-compiler', version: '3.1.+'
    // (both janino libraries are required by logback's if-then-else feature)
}

test {
    useJUnitPlatform()
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}


// Run locally with the embedded tomcat:
// - comment out id 'war' and providedRuntime '....starter-tomcat'
// - gradle clean build bootRun
// - curl http://localhost:8080/greeting?name=Joe | json_pp

// Build deployable war file:
// - don't comment out these two lines
// - gradle clean build
// - cp build/libs/streaming-api-v1.war ... (or upload via the tomcat manager)
//   (exploding of war file should be done automatically, after the .war file is
//   copied to /usr/share/tomcat/webapps/)
// - curl http://localhost:8000/streaming-api-v1/greeting?name=Joe | json_pp

// For each case:
// one line in MainAppStreamingApi.java has to be modified
